<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Choisir une vidéo</title>
    <style>
        h1, h2 #results-table {
            text-align: center;
        }
        .suggestions-box {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #ccc;
            max-height: 150px;
            overflow-y: auto;
            z-index: 1000;
        }
        .suggestions-box div {
            padding: 6px 10px;
            cursor: pointer;
        }
        .suggestions-box div:hover {
            background-color: #f0f0f0;
        }
        #search-tab {background-color:  #ffffff;}
        
    </style>
</head>
<body>
    <h1>Recherche de vidéos</h1>
    <form id="search-form" enctype="multipart/form-data">
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; max-width: 600px; margin: auto;">
            <label for="title">Titre :</label>
            <div style="position: relative;">
                <input type="text" id="title" name="title" autocomplete="off" value="{{ filters.title }}" style="width: 100%;">
                <div id="suggestions" class="suggestions-box"></div>
            </div>
            <label for="disc_number">Numéro du disque :</label>
            <input type="number" id="disc_number" name="disc_number">
            <label for="media_type">Type de Média :</label>
            <select id="media_type" name="media_type" onchange="toggleSeriesFields()">
                <option value="" selected>Film ou Série</option>
                <option value="series">Série</option>
                <option value="movie">Film</option>
            </select>
            <div id="series-fields" style="display: contents;">
                <label for="season">Saison :</label>
                <input type="number" id="season" name="season"  value="{{ filters.season }}">

                <label for="episode_number">Numéro de l’épisode :</label>
                <input type="number" id="episode_number" name="episode_number" value="{{ filters.episode_number }}">

                <label for="episode_title">Titre de L'épisode :</label>
                <input type="text" id="episode_title" name="episode_title" value="{{ filters.episode_title }}">
            </div>
        </div>
        <div style="text-align: center; margin-top: 20px;">
            <button type="button" onclick="search_from_database()">Rechercher</button>
        </div>
    </form>

    <h2>Résultats</h2>
    <div id="media-search-results">
        {% include "media_results.jinja" %}
    </div>

    <script>

        function toggleSeriesFields() {
            const mediaType = document.getElementById("media_type").value;
            const seriesFields = document.getElementById("series-fields").children;

            const show = (mediaType !== "movie");  // ✅ garder visibles pour "series" ou ""

            for (let field of seriesFields) {
                field.style.display = show ? "block" : "none";
            }
        }

        function search_from_database() {
            // Récupère le formulaire
            const form = document.getElementById("search-form");
            const raw = Object.fromEntries(new FormData(form));

            // Construit une payload en filtrant les valeurs vides
            const payload = {};
            for (const [key, val] of Object.entries(raw)) {
                if (val === "") continue;            // on ne transmet pas les champs vides
                // si ton modèle attend un int :
                if (["season","disc_number","episode_number"].includes(key)) {
                payload[key] = parseInt(val, 10);  // convertit en nombre
                } else {
                payload[key] = val;                // reste en chaîne
                }
            }

            fetch("/media_search", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            })
            .then(res => {
                if (!res.ok) throw new Error(`HTTP ${res.status}`);
                return res.text();  // on s’attend à un fragment HTML
            })
            .then(html => {
                // injecte le HTML rendu par media_results.jinja
                document.getElementById("media-search-results").innerHTML = html;
            })
            .catch(err => console.error("Erreur :", err));
        }

        document.getElementById("title").addEventListener("input", async function () {
            const query = this.value;
            const suggestionBox = document.getElementById("suggestions");

            if (query.length < 2) {
                suggestionBox.innerHTML = "";
                return;
            }

            try {
                const response = await fetch(`/api/titles?q=${encodeURIComponent(query)}`);
                const suggestions = await response.json();
                suggestionBox.innerHTML = "";

                suggestions.forEach(title => {
                    const div = document.createElement("div");
                    div.textContent = title;
                    div.addEventListener("click", () => {
                        document.getElementById("title").value = title;
                        suggestionBox.innerHTML = "";
                    });
                    suggestionBox.appendChild(div);
                });

            } catch (err) {
                console.error("Erreur de chargement des suggestions :", err);
            }
        });

    </script>
</body>
</html>
