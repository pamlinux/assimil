<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Éditeur de sous-titres</title>
    <style>
        body { display: flex; height: 100vh; margin: 0; flex-direction: column; align-items: center; }
        #container { display: flex; width: 100%; }
        #subtitles { width: 50%; overflow-y: auto; padding: 10px; border-right: 2px solid #ccc; }
        #video-container { width: 50%; display: flex; flex-direction: column; align-items: center; }
        video { width: 100%; max-width: 600px; }
        .subtitle { padding: 5px; cursor: pointer; border-bottom: 1px solid #ddd; }
        .active { background-color: yellow; }
        .controls { display: flex; gap: 10px; margin-top: 10px; }
        .controls button { font-size: 16px; padding: 5px 10px; cursor: pointer; background: none; border: none; }
        .controls img { width: 24px; height: 24px; }
        #current-subtitle { margin-top: 10px; font-size: 18px; font-weight: bold; }
    </style>
</head>
<body>
    <div id="container">
        <div id="subtitles"></div>
        <div id="video-container">
            <video id="video" controls>
                <source src="/simple-video.mp4" type="video/mp4">
                <track src="subtitles.srt" kind="subtitles" srclang="fr" label="Français" default>
             </video>
            <div class="controls">
                <button onclick="prevSubtitle()">
                    <img src="{{ url_for('static', path='/icons/step-backward.svg') }}" alt="Backward">
                </button>
                <button onclick="video.pause()">
                    <img src="{{ url_for('static', path='/icons/pause.svg') }}" alt="Pause">
                </button>
                <button onclick="video.play()">
                    <img src="{{ url_for('static', path='/icons/play.svg') }}" alt="Play">
                </button>
                <button onclick="replaySubtitle()">
                    <img src="{{ url_for('static', path='/icons/replay.svg') }}" alt="Replay">
                </button>
                <button onclick="nextSubtitle()">
                    <img src="{{ url_for('static', path='/icons/step-forward.svg') }}" alt="Forward">
                </button>
            </div>
            <div id="current-subtitle"></div>
        </div>
    </div>

    <script>
        const video = document.getElementById("video");
        const subtitleContainer = document.getElementById("subtitles");
        const currentSubtitleDisplay = document.getElementById("current-subtitle");
        let subtitles = [];
        let frenchSubtitles = [];
        let lastActiveIndex = -1;

        // Fetch Spanish subtitles
        fetch("http://127.0.0.1:8001/subtitles_es")
            .then(response => response.json())
            .then(data => {
                subtitles = data.map(sub => {
                    const [start, end] = sub.timestamp.split(' --> ').map(t => {
                        const [h, m, s] = t.split(':').map(parseFloat);
                        return h * 3600 + m * 60 + s;
                    });
                    return { id: sub.id, start, end, text: sub.spanish };
                });
                displaySubtitles();
            })
            .catch(error => console.error("Error loading Spanish subtitles:", error));

        // Fetch French subtitles
        fetch("http://127.0.0.1:8001/subtitles_fr")
            .then(response => response.json())
            .then(data => {
                frenchSubtitles = data;
                console.log("frenchSubtitles : ", frenchSubtitles[2])
            })
            .catch(error => console.error("Error loading French subtitles:", error));


        function displaySubtitles() {
            subtitleContainer.innerHTML = "";
            subtitles.forEach((sub, index) => {
                const div = document.createElement("div");
                div.classList.add("subtitle");
                div.innerHTML = sub.text.replace(/\n/g, "<br>");
                div.dataset.start = sub.start;
                div.dataset.index = index;
                div.onclick = () => {
                    video.currentTime = sub.start;
                    if (!video.paused) {
                        video.play();
                    }
                };
                subtitleContainer.appendChild(div);
            });
        }

        video.addEventListener("timeupdate", () => {
            subtitles.forEach((sub, index) => {
                const div = subtitleContainer.children[index];
                if (video.currentTime >= sub.start && video.currentTime < sub.end) {
                    div.classList.add("active");
                    div.scrollIntoView({ behavior: "smooth", block: "center" });
                    currentSubtitleDisplay.innerText = frenchSubtitles[index]?.french || "";
                    lastActiveIndex = index;
                } else {
                    div.classList.remove("active");
                }
            });
        });

        function replaySubtitle() {
            if (lastActiveIndex >= 0) {
                video.currentTime = subtitles[lastActiveIndex].start;
                video.play();
                setTimeout(() => {
                    video.pause();
                }, (subtitles[lastActiveIndex].end - subtitles[lastActiveIndex].start) * 1000);
            }
        }

        function prevSubtitle() {
            if (lastActiveIndex > 0) {
                video.currentTime = subtitles[lastActiveIndex - 1].start;
                if (!video.paused) {
                    video.play();
                }
            }
        }

        function nextSubtitle() {
            if (lastActiveIndex < subtitles.length - 1) {
                video.currentTime = subtitles[lastActiveIndex + 1].start;
                if (!video.paused) {
                    video.play();
                }
            }
        }
    </script>
</body>
</html>
