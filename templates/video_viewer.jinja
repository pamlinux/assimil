<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Éditeur de sous-titres</title>
    <style>
        html, body { height: 100vh; margin: 0; overflow: hidden; }
        #container { display: flex; width: 100%; margin-top: 40px; }
        #video-container { width: 60%; display: flex; flex-direction: column; align-items: center; }
        video { width: 100%; max-width: 720px; }
        .subtitle { padding: 5px; cursor: pointer; border-bottom: 1px solid #ddd; }
        .active { background-color: yellow; }
        .controls { display: flex; gap: 10px; margin-top: 10px; }
        .controls button { font-size: 16px; padding: 5px 10px; cursor: pointer; }
        .controls img { width: 24px; height: 24px; }
        #current-subtitle { margin-top: 10px; font-size: 18px; font-weight: bold; }
        .tabs { display: flex; gap: 10px; margin-bottom: 10px; }
        .tab { padding: 5px 10px; cursor: pointer; border: 1px solid #ddd; }
        .tab.active { background-color: lightgray; }
        #top-bar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 40px; /* Ajuste selon ta div */
            background: white; /* Ajoute un fond si besoin */
            z-index: 1000; /* Pour s'assurer qu'elle est au-dessus des autres éléments */
            display: flex;
            align-items: center; /* Centre verticalement les boutons */
        } 

        #subtitles {
            width: 40%;
            scroll-padding-top: 80px;
            border-right: 2px solid #ccc;
            text-align: center;
            overflow-y: auto;
            border: 1px solid #ddd;
            width: 80%;
        }

        #subtitles {
            max-height: calc(100vh - 80px); /* Ajuste la hauteur en soustrayant la barre du haut */
            overflow-y: auto;
        }

        #video-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
        }

        .tabs {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 10px;
        }

 
        #container {
            overflow: hidden; /* Évite que le conteneur principal bouge */
            display: flex;
            width: 100%;
            margin-top: 40px;
        }

        #subtitles-container {
            width: 40%;
            max-height: calc(100vh - 80px);
            overflow-y: auto;
            border-right: 2px solid #ccc;
        }

        #video-container {
            width: 60%;
            display: flex;
            flex-direction: column;
            align-items: center;
            position: sticky;
            top: 40px; /* Même hauteur que la top-bar */
            z-index: 999; /* Pour s'assurer qu'il reste au-dessus */
            }

        video {
            width: 100%;
            max-width: 720px;
        }

        .subtitle {
            padding: 5px;
            cursor: pointer;
            border-bottom: 1px solid #ddd;
        }

        .active {
            background-color: yellow;
        }

        .tabs {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 10px;
        }

        #current-subtitle {
            margin-top: 10px;
            font-size: 18px;
            font-weight: bold;
            text-align: center;
            min-height: 30px;
        }
        #current-subtitle {
            display: flex;
            /*justify-content: center;*/
            justify-content: space-between;
            gap: 20px;
            margin-top: 10px;
        }

        .sub-box {
            width: 50%;
            text-align: center;
            font-size: 18px;
            font-weight: bold;
            min-height: 30px;
        }
        #es-sub, #fr-sub {
            width: 50%;
            text-align: center;
        }

        #gridContainer {
            display: none; /* Initialement caché */
            grid-template-columns: repeat(2, 1fr);
            grid-template-rows: auto auto;
            gap: 10px;
            justify-items: stretch;
            align-items: stretch;
            width: 80%;
            margin: 20px auto;
        }

        #gridContainer > div {
            background-color: #eee;
            text-align: center;
            padding: 20px;
            border: 1px solid #ccc;
        }

        #divRegister {
            grid-column: 1 / 2;
        }

        #divCancel {
            grid-column: 2 / 3;
        }

        #changeDivsButton {
            display: none; /* Initialement caché */
            margin-top: 10px;
        }

    </style>
</head>
<body>
    <div id="top-bar">
        <button id="save-all">Tout Sauver</button>
        <input type="number" id="subtitle-number" placeholder="Numéro">
        <button id="go-to-subtitle">Aller</button>
    </div>

    <div id="container">
        <!-- Liste des sous-titres à gauche -->
        <div id="subtitles-container">
            <div id="subtitles"></div>
        </div>

        <!-- Vidéo + onglets sous la vidéo -->
        <div id="video-container">
            <video id="video" controls>
                <source src="/simple-video.mp4" type="video/mp4">
                <track src="subtitles.srt" kind="subtitles" srclang="fr" label="Français" default>
            </video>
            <div class="controls">
                <button onclick="prevSubtitle()">
                    <img src="{{ url_for('static', path='/icons/step-backward.svg') }}" alt="Backward">
                </button>
                <button onclick="video.pause()">
                    <img src="{{ url_for('static', path='/icons/pause.svg') }}" alt="Pause">
                </button>
                <button onclick="playVideo()">
                    <img src="{{ url_for('static', path='/icons/play.svg') }}" alt="Play">
                </button>
                <button onclick="replaySubtitle()">
                    <img src="{{ url_for('static', path='/icons/replay.svg') }}" alt="Replay">
                </button>
                <button onclick="nextSubtitle()">
                    <img src="{{ url_for('static', path='/icons/step-forward.svg') }}" alt="Forward">
                </button>
            </div>

            <!-- Onglets sous la vidéo -->
            <div class="tabs">
                <div class="tab active" data-type="es">ES</div>
                <div class="tab" data-type="fr">FR</div>
                <div class="tab" data-type="esfr">ES + FR</div>
                <div class="tab" data-type="eslong">ES Long</div>
                <div class="tab" data-type="frlong">FR Long</div>
                <div class="tab" data-type="esfrlong">ES + FR Long</div>
            </div>

                        <!-- Uniquement le sous-titre actif -->
            <!-- Conteneur pour afficher les sous-titres actifs sous la vidéo -->
            <div id="current-subtitle">
                <div id="es-sub" class="sub-box"></div>
                <div id="fr-sub" class="sub-box"></div>
            </div>


            <button id="toggleEditionButton">Edition</button>
            <button id="changeDivsButton">4 Divs</button>
            <div id="gridContainer">
                <div id="div1">Div 1</div>
                <div id="div2">Div 2</div>
                <div id="divRegister">Enregistrer</div>
                <div id="divCancel">Abandonner</div>
            </div>
       </div>
    </div>


    <script>
        const video = document.getElementById("video");
        const subtitleContainer = document.getElementById("subtitles");
        const currentSubtitleDisplay = document.getElementById("current-subtitle");
        let subtitlesData = { es: [], fr: [], eslong: [], frlong: [] };
        let activeTab = "es";
        let subtitles = subtitlesData["es"];
        let currentIndex = -1;
        let replayingSubtitle = false;
        let replayingSubtitleIndex = -1;
        
        let editSubtitleDiv = document.getElementById("edit");
        const currentSubtitleDiv = document.getElementById("current-subtitle");

        const toggleEditionButton = document.getElementById('toggleEditionButton');
        const changeDivsButton = document.getElementById('changeDivsButton');
        const gridContainer = document.getElementById('gridContainer');
        const divRegister = document.getElementById('divRegister');
        const divCancel = document.getElementById('divCancel');

        let isGridVisible = false;
        let isFourDivs = false;

        toggleEditionButton.addEventListener('click', () => {
            isGridVisible = !isGridVisible;
            gridContainer.style.display = isGridVisible ? 'grid' : 'none';
            changeDivsButton.style.display = isGridVisible ? 'inline-block' : 'none';
        });

        changeDivsButton.addEventListener('click', () => {
            isFourDivs = !isFourDivs;

            if (isFourDivs) {
                changeDivsButton.textContent = '3 Divs';
                gridContainer.style.gridTemplateColumns = 'repeat(4, 1fr)';

                let div4 = document.getElementById('div4');
                if (!div4) {
                    div4 = document.createElement('div');
                    div4.id = 'div4';
                    div4.textContent = 'Div 4';
                    gridContainer.insertBefore(div4, divRegister);
                }

                let div5 = document.getElementById('div5');
                if (!div5) {
                    div5 = document.createElement('div');
                    div5.id = 'div5';
                    div5.textContent = 'Div 5';
                    gridContainer.insertBefore(div5, divRegister);
                }

                if (divRegister) {
                    divRegister.style.gridColumn = '2 / 3';
                }
                if (divCancel) {
                    divCancel.style.gridColumn = '3 / 4';
                }
            } else {
                changeDivsButton.textContent = '4 Divs';
                gridContainer.style.gridTemplateColumns = 'repeat(2, 1fr)';

                const div4 = document.getElementById('div4');
                if (div4) {
                    gridContainer.removeChild(div4);
                }

                const div5 = document.getElementById('div5');
                if (div5) {
                    gridContainer.removeChild(div5);
                }

                if (divRegister) {
                    divRegister.style.gridColumn = '1 / 2';
                }
                if (divCancel) {
                    divCancel.style.gridColumn = '2 / 3';
                }
            }
        });

        const hideGrid = () => {
            gridContainer.style.display = 'none';
            changeDivsButton.style.display = 'none';
            isGridVisible = false;
        };

        divRegister.addEventListener('click', hideGrid);
        divCancel.addEventListener('click', hideGrid);

        function findCurrentSubtitleIndexWithDelta(subtitles, currentTime, delta) {
            let maxLimit = 0.0;
            if (!subtitles || subtitles.length === 0) {
                console.log("problem 1");
                return -1;
            }                                   

            for (let i = 0; i < subtitles.length; i++) {
                const currentSub = subtitles[i];
                const start = currentSub.start;
                const endWithDelta = currentSub.end + delta;

                if (i + 1 < subtitles.length) {
                    maxLimit = subtitles[i + 1].start;
                } else {
                    maxLimit = endWithDelta;
                }

                if (currentTime >= start && currentTime < endWithDelta && currentTime < maxLimit) {
                    return i; // Retourner l'index de l'élément courant
                }
            }
            console.log("problem 2");
            return -1; // Aucun sous-titre trouvé dans la marge delta
        }

        function updateActiveSubtitle() {
            currentSubtitleDiv.innerHTML = ""; // Réinitialiser avant d'ajouter du contenu
            const delta = 0.5;
            // Trouver l'index correspondant pour les sous-titres longs
            if (["esfrlong", "eslong", "frlong"].includes(activeTab)) {
                subtitles = subtitlesData["eslong"];
            } else {
                subtitles = subtitlesData["es"];
            }
            currentIndex = findCurrentSubtitleIndexWithDelta(subtitles, video.currentTime, delta)
            // Cas où l'on affiche un seul sous-titre
            if (["es", "fr", "eslong", "frlong"].includes(activeTab)) {
                const subDiv = document.createElement("div");
                currentSubtitleDiv.appendChild(subDiv);
                if (currentIndex > -1) {
                    subDiv.textContent = subtitlesData[activeTab][currentIndex].text || "";
                } else {
                    subDiv.textContent = "";
                }
            }
            // Cas où l'on affiche ES + FR
            else if (["esfr", "esfrlong"].includes(activeTab)) {
                const esSubDiv = document.createElement("div");
                esSubDiv.id = "es-sub";
                if (currentIndex > -1) {
                    if (activeTab == "esfr") {
                        esSubDiv.textContent = subtitlesData["es"][currentIndex].text || "";
                    } else {
                        esSubDiv.textContent = subtitlesData["eslong"][currentIndex].text || "";
                    }
                    const frSubDiv = document.createElement("div");
                    frSubDiv.id = "fr-sub";
                    if (activeTab == "esfr") {
                        frSubDiv.textContent = subtitlesData["fr"][currentIndex].text || "";
                    } else {
                        frSubDiv.textContent = subtitlesData["frlong"][currentIndex].text || "";
                    }
                    currentSubtitleDiv.appendChild(esSubDiv);
                    currentSubtitleDiv.appendChild(frSubDiv);
                }
            }
            enableSubtitleEditing(); 
        }

        function findClosestSubtitle(lang, time) {
            return subtitlesData[lang].reduce((closest, sub) => {
                return Math.abs(sub.start - time) < Math.abs(closest.start - time) ? sub : closest;
            }, subtitlesData[lang][0] || { text: "", start: 0 });
        }

        // Changement d'onglet pour afficher le bon sous-titre sous la vidéo
        document.querySelectorAll(".tab").forEach(tab => {
            tab.addEventListener("click", () => {
                document.querySelectorAll(".tab").forEach(t => t.classList.remove("active"));
                tab.classList.add("active");
                activeTab = tab.dataset.type;
                displaySubtitles(); 
                console.log("Affichage des sous-titres:", activeTab);
                updateActiveSubtitle();
            });
        });

        // Chargement des sous-titres
        function loadSubtitles(type, url) {
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    subtitlesData[type] = data;
                    if (type === "es") displaySubtitles(); // Afficher les sous-titres au démarrage
                })
                .catch(error => console.error("Error loading subtitles:", error));
        }

        // Affichage de la liste des sous-titres à gauche
        function displaySubtitles() {
            subtitleContainer.innerHTML = "";

            subtitlesData["es"].forEach((sub, index) => {
                const div = document.createElement("div");
                div.classList.add("subtitle");
                div.innerText = sub.text;
                div.dataset.start = sub.start;
                div.dataset.index = index;
                div.onclick = () => {
                    video.currentTime = sub.start;
                    if (!video.paused) video.play();
                };
                subtitleContainer.appendChild(div);
            });
        }

        // Synchronisation des sous-titres avec la vidéo
        video.addEventListener("timeupdate", () => {
            subtitlesData["es"].forEach((sub, index) => {
                const div = subtitleContainer.children[index];
                if (video.currentTime >= sub.start && video.currentTime < sub.end) {
                    div.scrollIntoView({ behavior: "smooth", block: "center" });
                    div.classList.add("active");
                    updateActiveSubtitle();
                } else {
                    div.classList.remove("active");
                }
            });
        });

        function playVideo() {
            video.play();
            replayingSubtitle = false;
        }

        function replaySubtitle() {
            if (!replayingSubtitle) {
                replayingSubtitleIndex = currentIndex;
                replayingSubtitle = true;
            }
            if (replayingSubtitleIndex >= 0) {
                video.currentTime = subtitles[replayingSubtitleIndex].start - 1.0;
                video.play();
                setTimeout(() => {
                    video.pause();
                }, ((subtitles[replayingSubtitleIndex].end - subtitles[replayingSubtitleIndex].start) + 2.0) * 1000);
            }
        }

        function prevSubtitle() {
            currentIndex = currentIndex - 1;
            //console.log("currentIndex", currentIndex, "video.currentTime ", video.currentTime );
            if (currentIndex >= 0) {
                replayingSubtitle = false;
                video.currentTime = subtitles[currentIndex].start;
                if (!video.paused) {
                    video.play();
                }
            }
        }

        function nextSubtitle() {
            currentIndex = currentIndex + 1;
            if (currentIndex < subtitles.length - 1) {
                replayingSubtitle = false;
                video.currentTime = subtitles[currentIndex].start;
                //console.log(currentIndex, "!!! currentTime has just changed. video.currentTime :", video.currentTime);
                if (!video.paused) {
                    video.play();
                }
            }
        }

        loadSubtitles("es", "http://127.0.0.1:8001/subtitles_es");
        loadSubtitles("fr", "http://127.0.0.1:8001/subtitles_fr");
        loadSubtitles("eslong", "http://127.0.0.1:8001/long_subtitles_es");
        loadSubtitles("frlong", "http://127.0.0.1:8001/long_subtitles_fr");

        function enableSubtitleEditing() {
            let currentSubtitleDiv = document.getElementById("current-subtitle");

            if (!currentSubtitleDiv) return;

            // Vérifie s'il y a déjà un bouton pour éviter les doublons
            let existingButton = document.getElementById("edit-button");
            if (existingButton) return;

            // Création du bouton "Édition"
            const editButton = document.createElement("button");
            editSubtitleDiv.appendChild(editButton);
            editButton.id = "edit-button";
            editButton.textContent = "Édition";
            editButton.style.display = "block";
            editButton.style.margin = "10px auto"; // Centrage du bouton

            editButton.onclick = () => enterEditMode();

            // Ajouter le bouton sous les sous-titres
            currentSubtitleDiv.appendChild(editButton);
        }

        function enterEditMode() {
            let currentSubtitleDiv = document.getElementById("current-subtitle");
            if (!currentSubtitleDiv) return;

            // Identifier la bonne div selon activeTab
            let subDiv;
            if (["esfr", "esfrlong"].includes(activeTab)) {
                subDiv = {
                    es: document.getElementById("es-sub"),
                    fr: document.getElementById("fr-sub")
                };
            } else {
                subDiv = { es: currentSubtitleDiv }; // Pour les autres cas, la div principale contient le texte
            }

            // Rendre le(s) sous-titre(s) éditable(s)
            if (subDiv.es) subDiv.es.contentEditable = "true";
            if (subDiv.fr) subDiv.fr.contentEditable = "true";

            // Vérifie s'il y a déjà les champs d'édition pour éviter les doublons
            if (document.getElementById("start-time-input")) return;

            // Création des champs d'édition pour les temps
            let startTimeLabel = document.createElement("label");
            startTimeLabel.textContent = "Début : ";
            let startTimeInput = document.createElement("input");
            startTimeInput.type = "number";
            startTimeInput.id = "start-time-input";
            startTimeInput.step = "0.1";
            startTimeInput.value = subtitles[currentIndex].start; 

            let endTimeLabel = document.createElement("label");
            endTimeLabel.textContent = "Fin : ";
            let endTimeInput = document.createElement("input");
            endTimeInput.type = "number";
            endTimeInput.id = "end-time-input";
            endTimeInput.step = "0.1";
            endTimeInput.value = subtitles[currentIndex].end; 

            // Création du bouton "Sauver"
            const saveButton = document.createElement("button");
            saveButton.textContent = "Sauver";
            saveButton.style.display = "block";
            saveButton.style.margin = "10px auto"; // Centrage du bouton
            saveButton.onclick = saveEdits;

            // Ajout des éléments à la div des sous-titres
            currentSubtitleDiv.appendChild(document.createElement("br"));
            currentSubtitleDiv.appendChild(startTimeLabel);
            currentSubtitleDiv.appendChild(startTimeInput);
            currentSubtitleDiv.appendChild(endTimeLabel);
            currentSubtitleDiv.appendChild(endTimeInput);
            currentSubtitleDiv.appendChild(saveButton);
        }


        function saveEdits() {
            let esSubDiv = document.getElementById("es-sub");
            let frSubDiv = document.getElementById("fr-sub");

            let startTimeInput = document.getElementById("start-time-input");
            let endTimeInput = document.getElementById("end-time-input");

            if (esSubDiv) subtitles[currentIndex].es = esSubDiv.innerText;
            if (frSubDiv) subtitles[currentIndex].fr = frSubDiv.innerText;

            subtitles[currentIndex].start = parseFloat(startTimeInput.value);
            subtitles[currentIndex].end = parseFloat(endTimeInput.value);

            // Envoyer les modifications au serveur
            fetch("/update-subtitle", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(subtitles[currentIndex])
            }).then(response => {
                if (response.ok) {
                    console.log("Sous-titre mis à jour !");
                } else {
                    console.error("Erreur de mise à jour !");
                }
            });

            // Désactiver l'édition après sauvegarde
            if (esSubDiv) esSubDiv.contentEditable = "false";
            if (frSubDiv) frSubDiv.contentEditable = "false";

            // Supprimer les champs d'édition
            startTimeInput.remove();
            endTimeInput.remove();
            document.getElementById("edit-button").remove();
            document.querySelector("button[textContent='Sauver']").remove();
        }

    </script>
</body>
</html>
